09/18 I'm Gonna start logging all the improvmmennts and what changes I am making and why
Start develoment again and the model still is not grabbing on to training. 
I have tried a number of different solutions however none have worked. A CONV network I found on medium and regular dense layers have yet to identify how to avoid previously shot at moves.
I have also tracked down a number of memory and worked on speeding up the root of the enviroment.

Going to start today by adding on fit and a way to record memories will lean toward overfitting during these first few attempts at aquiring data.
Added the functionality to get a dataset from the games that were played. However the model seems to not even be training itself and predicts the same value no matter what. Sigmoids are same for all but last.

09/19
Created a new file for training off of previously recorded memories.
Great reduction in loss.
Added a custom accuracy function which confirms findings of a positive response to binary crossentropy loss with dense network.
Ultimately realized that above findings were due to a very small sample size allowing for over fitting.
Reshaped the model to add residual that come back in at the very end. Should have increased game length but did not.
Apples createml results in 96% accuracy for training data and used a boosted tree network. 
I am going to look into implementing something like this in tensorflow.

09/20 Implementing keras tuner to see if I can find better results on current training data.
Results of keras tuning, while they did a good job training they ultimately failed evaluation and top models would double shoot squares.
This could be due to not using validation accuracy.
Next step will be keras tuning directly in reinforcment training.
Tried multiple ways of activating radeon gpu on my mac however unsuccessful. 
Going to use the colab instead.
Also added xception and hyperband in hopes of finding a better performing model, however I am a little short onn dataset length.

09/25 Switched to PaperSpace notebooks and have been training for quite a while.
Discovered a fatal flaw in the shuffling of data which invalidates the hbtuner process.
Continuing regardless in the interest of time.
Training has been promsing producing upto 0.25 accuracy after less than four epochs still quite far from the values I have been targeting.

09/30 Finished with xception keras-tuning and was left with semi accurate models however loss was 0.6~0.7.
Ultimately learned that I need a small model with inception and fewer layers.
Created my own model based on inception with 3 convolutional paths a Average Pooling which are conactenated along with one more convolution and the misses data which are then fully connected using locally connected.

09/31
Training with new model does ~20 moves w/o failures.
Added in a tolerance to counteract popularity of early game states so model is more saturated.

10/15 Forgot to take notes for a while.
Turns out the root of all problems had to do with training.
The list for examples and labels were unsynced when shuffling. 
This problem has been solved now and the model trains as expected.
Explains why the model would not work after running through the hbtuner with good results.

10/16 
Added cpu and gpu execution.
Working on adding an easy game gui that works when playing live.